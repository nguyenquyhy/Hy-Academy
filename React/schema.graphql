schema {
  query: Query
  mutation: Mutation
}

type AuthorizeDirective {
  policy: String
  roles: [String!]
  apply: ApplyPolicy!
}

type Course {
  permissions: CoursePermission!
  title: String!
  description: String!
  roleAssignments: [RoleAssignment!]!
  enrollments: [Enrollment!]!
  lessons: [Lesson!]!
  id: UUID!
  added: DateTime!
  updated: DateTime!
}

type CoursePermission {
  canEdit: Boolean!
  canEnroll: Boolean!
}

"A connection to a list of items."
type CoursesConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [CoursesEdge!]
  "A flattened list of the nodes."
  nodes: [Course!]
}

"An edge in a connection."
type CoursesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Course!
}

type EnrollResult {
  enrollment: Enrollment!
}

type Enrollment {
  student: Profile!
  course: Course!
  id: UUID!
  added: DateTime!
  updated: DateTime!
}

type Lesson {
  course: Course!
  name: String!
  description: String!
  id: UUID!
  added: DateTime!
  updated: DateTime!
}

type Mutation {
  addCourse(input: AddCourseInput!): Course!
  editCourse(input: EditCourseInput!): Course!
  enroll(input: EnrollInput!): EnrollResult!
}

"A connection to a list of items."
type MyCoursesConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [MyCoursesEdge!]
  "A flattened list of the nodes."
  nodes: [Course!]
}

"An edge in a connection."
type MyCoursesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Course!
}

"Information about pagination in a connection."
type PageInfo {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}

type Profile {
  userId: String!
  roleAssignments: [RoleAssignment!]!
  enrollments: [Enrollment!]!
  id: UUID!
  added: DateTime!
  updated: DateTime!
}

type Query {
  value: Int!
  authValue: String!
  courses("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String): CoursesConnection
  myCourses("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String): MyCoursesConnection
  course(id: UUID!): Course
}

type RoleAssignment {
  profile: Profile!
  course: Course!
  role: Role!
  id: UUID!
  added: DateTime!
  updated: DateTime!
}

input AddCourseInput {
  title: String!
  description: String!
  visibility: CourseVisibility!
}

input EditCourseInput {
  courseId: UUID!
  title: String!
  description: String!
  visibility: CourseVisibility!
}

input EnrollInput {
  courseId: UUID!
}

enum ApplyPolicy {
  BEFORE_RESOLVER
  AFTER_RESOLVER
}

enum CourseVisibility {
  PRIVATE
  UNLISTED
  PUBLIC
}

enum Role {
  OWNER
  CONTRIBUTOR
}

"The `@defer` directive may be provided for fragment spreads and inline fragments to inform the executor to delay the execution of the current fragment to indicate deprioritization of the current fragment. A query with `@defer` directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred is delivered in a subsequent response. `@include` and `@skip` take precedence over `@defer`."
directive @defer("If this argument label has a value other than null, it will be passed on to the result of this defer directive. This label is intended to give client applications a way to identify to which fragment a deferred result belongs to." label: String "Deferred when true." if: Boolean) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"The `@specifiedBy` directive is used within the type system definition language to provide a URL for specifying the behavior of custom scalar definitions."
directive @specifiedBy("The specifiedBy URL points to a human-readable specification. This field will only read a result for scalar types." url: String!) on SCALAR

"The `@stream` directive may be provided for a field of `List` type so that the backend can leverage technology such as asynchronous iterators to provide a partial list in the initial response, and additional list items in subsequent responses. `@include` and `@skip` take precedence over `@stream`."
directive @stream("If this argument label has a value other than null, it will be passed on to the result of this stream directive. This label is intended to give client applications a way to identify to which fragment a streamed result belongs to." label: String "The initial elements that shall be send down to the consumer." initialCount: Int! = 0 "Streamed when true." if: Boolean) on FIELD

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime @specifiedBy(url: "https:\/\/www.graphql-scalars.com\/date-time")

scalar UUID @specifiedBy(url: "https:\/\/tools.ietf.org\/html\/rfc4122")